version: '3'

services:
  # scraper:
  #   build:
  #     context: .
  #     dockerfile: scraper/Dockerfile
  #   volumes:
  #     - database_volume:/app/data

  scraper:
    build:
      context: .
      dockerfile: scraper_spider/Dockerfile
    volumes:
      - database_volume:/app/data

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - scraper
    volumes:
      - database_volume:/app/data

volumes:
  database_volume:

# This configuration defines two services: scraper_spider (or scraper) and api.
# It also sets up a volume data to store the SQLite database file.
# This ensures that the database file created by the scraper is also accessible to the API service.


# =================================== AZURE =============================================

# version: '3'

# services:
#   scraper:
#     image: fastapireg.azurecr.io/scraper:latest
#     environment:
#       - DATABASE_CONNECTION_STRING=${DATABASE_CONNECTION_STRING}
#       - CONTAINER_NAME=${BLOB_CONTAINER_NAME}
#     volumes:
#       - mydata:/app/data

#   api:
#     image: fastapireg.azurecr.io/api:latest
#     ports:
#       - "8000:8000"
#     depends_on:
#       - scraper
#     environment:
#       - DATABASE_CONNECTION_STRING=${DATABASE_CONNECTION_STRING}
#       - CONTAINER_NAME=${BLOB_CONTAINER_NAME}
#     volumes:
#       - mydata:/app/data

#   azurite:
#     image: mcr.microsoft.com/azure-storage/azurite
#     ports:
#       - "10000:10000"
#     command: "azurite-blob --blobHost 0.0.0.0"
#     environment:
#       - AZURITE_ACCOUNTS=${AZURITE_ACCOUNT_NAME}:${AZURITE_ACCOUNT_KEY}
#       - CONTAINER_NAME=${BLOB_CONTAINER_NAME}

# volumes:
#   mydata:
#     driver: azure_file
#     driver_opts:
#       share_name: api-storage-file-share
#       storage_account_name: apistorage1212
